# version: '3.8'

services:
  # mongo:
  #   image: mongo:latest
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     - MONGO_INITDB_ROOT_USERNAME=Exypnotech
  #     - MONGO_INITDB_ROOT_PASSWORD=EMj6oghYfCtAU2nX
  #   volumes:
  #     - mongo-data:/data/db
  #   healthcheck:
  #     test: ["CMD", "mongosh", "--host", "localhost", "--port", "27017", "-u", "Exypnotech", "-p", "EMj6oghYfCtAU2nX", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s
  #   networks:
  #     - iot-network
  # kafka:
  #   image: bitnami/kafka:latest
  #   restart: always
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     - KAFKA_CFG_NODE_ID=1
  #     - KAFKA_CFG_PROCESS_ROLES=broker,controller
  #     - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
  #     - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
  #     - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  #     - KAFKA_KRAFT_CLUSTER_ID=kraft-cluster-1
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #   healthcheck:
  #     test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - iot-network
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
      KAFKA_CREATE_TOPICS: "truck-route-updates:1:1,truck-updates:1:1,truck-data:1:1,truck-stops:1:1"
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./node-api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
      - MONGO_URI=mongodb://Exypnotech:EMj6oghYfCtAU2nX@mongo:27017/trucknavigation?authSource=admin
      - JWT_SECRET=your-jwt-secret
      - SESSION_SECRET=your-session-secret
      - APP_URL_CLIENT=http://localhost:3000
      - SCHEDULE_HOUR=24
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - iot-network

  osrm:
    image: osrm/osrm-backend
    container_name: osrm_backend
    volumes:
      - ./osrm-data:/data
    command: osrm-routed --algorithm mld /data/tunisia-latest.osrm
    ports:
      - "5000:5000"
    networks:
      - iot-network
  frontend:
    build:
      context: ./material-react-app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - iot-network

  truck_simulator:
    build:
      context: ./simulator
      dockerfile: Dockerfile.simulator
    environment:
      - KAFKA_BROKERS=kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - iot-network
  truck-stops-simulator:
    build: 
      context: ./simulator
      dockerfile: Dockerfile.stops
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKERS=kafka:9092
      - LOG_LEVEL=INFO
    restart: always
    networks:
      - iot-network  

volumes:
  mongo-data:

networks:
  iot-network:
    driver: bridge
